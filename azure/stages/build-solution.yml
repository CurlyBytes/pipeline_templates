parameters:
# stage_name - (Optional) The name of the stage, so that it can be referenced elsewhere (eg for dependsOn property). 
# Defaults to 'Build_Solution'
- name: stage_name
  type: string
  default: 'Build_Solution'
# depends_on - (Optional) The array of stages that this stage depends on. Default is that this stage does not depend on 
# any other stage
- name: depends_on
  type: string
  default: ''
# vm_image - (Optional) The name of the vm image to use for execution. Defaults to windows-2022
- name: vm_image
  type: string
  default: 'windows-2022'
# build_enabled - (Optional) Whether this stages should be executed. Note that setting this to false won't completely
# cancel the stage, it will merely skip most of the stages. The stage will appear to complete successfully, so
# any stages that depend on this stage will attempt to execute
- name: build_enabled
  type: boolean
  default: true

# solution_filename - (Required) The relative path to the solution file that should be built
- name: solution_filename
  type: string
# solution_build_configuration - (Optional) The build configuration within the solution that should be invoked. 
# Default is Release but can be overwritten if you want to do say a Debug build
- name: solution_build_configuration
  type: string
  default: Debug
# solution_target_platform - (Optional) The target platform that the solution build will use. 
# Defaults to 'x86'
- name: solution_target_platform
  type: string
  default: 'x86'

# artifact_name - (Optional) The name of the artifact to copy application to
- name: artifact_name
  type: string
  default: 'drop'
# artifact_folder - (Optional) The name of the folder to copy application to in the artifact
- name: artifact_folder
  type: string
  default: 'Solution'

# onStart - (Optional) Steps to be executed before stage starts
- name: onStart
  type: stepList
  default: []
# preBuild - (Optional) Steps to be executed before the build starts
- name: preBuild
  type: stepList
  default: []
# postBuild - (Optional) Steps to be executed after the build has been invoked
- name: postBuild
  type: stepList
  default: []
# prePublish - (Optional) Steps to be executed before application package is published to artifact
- name: prePublish
  type: stepList
  default: []
# onEnd - (Optional) Steps to be executed at the end of the stage
- name: onEnd
  type: stepList
  default: []

# windows_nuget_version - (Optional) Use to override the NuGet version (defaults to 6.0.0)
- name: windows_nuget_version
  type: string
  default: '6.0.0'
# net_core_version - (Optional) Use to override the .NET Core version (defaults to 6.0.x)
- name: net_core_version 
  type: string 
  default: '6.0.x'
# windows_sdk_version - (Optional) The version of the windows sdk to install (default '' for no installation)
- name: windows_sdk_version 
  type: string 
  default: ''

stages:
- stage: ${{ parameters.stage_name }}
  dependsOn: ${{ parameters.depends_on }} 
  condition: and(succeeded(), ${{ parameters.build_enabled }} )


  pool:
    vmImage: '${{ parameters.vm_image }}'

  jobs:
  - job: BuildSolution

    steps:

    - task: Bash@3
      displayName: 'Parameters'
      condition: and( succeeded(), eq(variables['agent.diagnostic'], 'true') )
      inputs:
        targetType: inline
        script: |
          echo -------------------------------------------------------------
          echo -------------------------------------------------------------
          echo Stage name: "${{ parameters.stage_name }}"
          echo Depends on: "${{ parameters.depends_on }}"
          echo VM image: "${{ parameters.vm_image }}"
          echo Build enabled: "${{ parameters.build_enabled }}"
          echo Solution filename: "${{ parameters.solution_filename }}"
          echo Build configuration: "${{ parameters.solution_build_configuration }}"
          echo Solution target platform: "${{ parameters.solution_target_platform }}"
          echo Artifact name: "${{ parameters.artifact_name }}"
          echo Artifact folder: "${{ parameters.artifact_folder }}"
          echo Nuget version: "${{ parameters.windows_nuget_version }}"
          echo Net core version: "${{ parameters.net_core_version  }}"
          echo Windows sdk version: "${{ parameters.windows_sdk_version  }}"
          echo On start: ${{ length(parameters.onStart) }}  steps
          echo Pre build: ${{ length(parameters.preBuild) }}  steps
          echo Post build: ${{ length(parameters.postBuild) }}  steps
          echo Pre publish: ${{ length(parameters.prePublish) }}  steps
          echo On end: ${{ length(parameters.onEnd) }}  steps
          echo -------------------------------------------------------------
          echo -------------------------------------------------------------

    # onStart steps - performed after any secure files are downloaded but before 
    # any other build steps are executed
    - ${{ parameters.onStart }}

    - template: ../steps/windows/find-solution-file.yml
      parameters:
        name: '${{ parameters.stage_name }}SolutionFind'
        solution_filename: '${{ parameters.solution_filename }}' 
        output_solution_folder: 'outsolutionfolder'
        output_solution_file_path: 'outsolutionfile'
        output_nuget_config_file_path: 'outnugetconfig'

    - template: ../steps/windows/windows-sdk-install-solution.yml
      parameters:
        name: '${{ parameters.stage_name }}DownloadInstallWindowsSdk'
        windows_sdk_version: '${{ parameters.windows_sdk_version }}'
        solution_file: '${{ parameters.solution_filename }}'

    # Select the .Net Core version based on the net_core_version parameter          
    - task: UseDotNet@2
      displayName: 'Use .Net Core sdk ${{ parameters.net_core_version }}'
      inputs:
        version: '${{ parameters.net_core_version }}'

    # Install and Restore NuGet for the solution
    - template: ../steps/nuget-install-and-restore.yml
      parameters:
        nuget_version_to_install: '${{ parameters.windows_nuget_version }}'
        solution_filename: '$(${{ parameters.stage_name }}SolutionFind.outsolutionfile)'
        nuget_config_file: '$(${{ parameters.stage_name }}SolutionFind.outnugetconfig)'

    # preBuild steps - performs steps prior to executing the solution build
    - ${{ parameters.preBuild }}

    # Build the solution
    - task: VSBuild@1
      displayName: 'Building solution ${{ parameters.solution_filename }}'
      inputs:
        solution: '${{ parameters.solution_filename }}'
        msbuildArgs: '/p:platform="${{ parameters.solution_target_platform }}"' 
        configuration: '${{ parameters.solution_build_configuration }}'

    # postBuild steps - performs steps immediately after executing the solution build
    - ${{ parameters.postBuild }}

    - script: |
        del packages.lock.json /s /f
        git reset --hard
      displayName: Restore package lock files so the nuget is cached


    # prePublish steps - performs steps prior to publishing all artifacts from the staging directory
    - ${{ parameters.prePublish }}
 
    # Publish artifacts from this stage
    - task: PublishBuildArtifacts@1
      displayName: 'Publishing artifacts to ${{ parameters.artifact_name }}'
      inputs:
        pathtoPublish: '$(build.artifactStagingDirectory)' 
        artifactName: '${{ parameters.artifact_name }}' 
        publishLocation: Container

    # onEnd steps - performs steps after publishing artifacts, at the end of the build stage
    - ${{ parameters.onEnd }}


